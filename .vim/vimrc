set nocompatible              " be iMproved, required
filetype off                  " required

" checking for OS
let g:platform = 0
let g:distro = 0

if filereadable("/etc/debian_version")
	let g:platform="Linux"
	let g:distro="Debian"
elseif has('mac')
	let g:platform="Darwin"
	let g:distro="OSX"
elseif has('win32') || ('win16')
	let g:platform="Windows"
elseif filereadable("/etc/redhat-release")
	let g:platform="Linux"
	let g:distro="CentOs"
endif

" switching to vim-Plug

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdcommenter'
Plug 'mileszs/ack.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'elzr/vim-json'
Plug 'scrooloose/syntastic'
Plug 'honza/vim-snippets'
Plug 'townk/vim-autoclose'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'hashivim/vim-terraform'

" Ansible Stuff
Plug 'pearofducks/ansible-vim'

" Python Plugins
Plug 'nvie/vim-flake8'
Plug 'vim-scripts/indentpython.vim'

" tpope stuff -- awesomness
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vividchalk'

" Writing/Prose
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }

" Golang Stuff
Plug 'fatih/vim-go'

" Rust
Plug 'rust-lang/rust.vim'

" Colors and Visuals
Plug 'altercation/vim-colors-solarized'
Plug 'dracula/vim', {'as': 'dracula'}
Plug 'flazz/vim-colorschemes'
Plug 'sjl/badwolf'
Plug 'tomasr/molokai'
Plug 'liuchengxu/space-vim-theme'
Plug 'jacoborus/tender.vim', {'as': 'tender'}
Plug 'dirtyonekanobi/cisco.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'NLKNguyen/papercolor-theme', {'as': 'papercolor'}
Plug 'kyoz/purify', { 'rtp': 'vim' }
if !has('nvim')
  Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
  Plug 'powerline/powerline-fonts'
endif

" --- Neovim Specific --- "
if has('nvim')
  "Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
endif 

call plug#end()

set hidden
if !has('nvim')
  set term=xterm-256color
endif

set backspace=2		" Make Backspace NORMAL
syntax enable		" Highlight Some Syntax
syntax on
let mapleader="\<Space>"    " leader is SPACE
set noswapfile


" ColorScheme Changes
set background=dark
"silent! colorscheme dracula
"color space_vim_theme
colorscheme solarized
set ruler
set laststatus=2

" Universal Stuff
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8
" call togglebg#map("<F5>")	" Toggle Background Colors
set number			" Line Numbers
set incsearch           	" search as characters are entered
set hlsearch            	" highlight matches

"set tabstop=4	" number of visual spaces per TAB
set softtabstop=2	" number of spaces in TAB when editing
set expandtab
set showmatch
" move to beginning/end of line
nnoremap B ^
nnoremap E $
" jk is escape
inoremap jk <esc>
" save session with leader-s
nnoremap <leader>s :mksession<CR>


"------------- Python Specific -----------------"
" Must Fix
" VirtualEnv Sanity
" py << EOF
" import os.path
" import sys
" import vim
" if 'VIRTUA_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   sys.path.insert(0, project_base_dir)
"   activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
"endif
"EOF


"------------Start Python PEP 8 stuff----------------"
"" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4
au BufRead,BufNewFile *.py,*.pyw set expandtab
au BufRead,BufNewFile *.py set softtabstop=4
au BufRead,BufNewFile *.py set textwidth=120
au BufRead,BufNewFile *.py set autoindent
au BufRead,BufNewFile *.py set fileformat=unix
set foldlevelstart=99

highlight BadWhitespace ctermbg=red guibg=red

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
let python_highlight_all=1

autocmd FileType python set foldmethod=indent

"----------------- End Python PEP 8 Stuff ------------"
autocmd FileType python nnoremap <leader>r :!clear;python %<CR>

"space+f to open all folds
nnoremap <leader>f zR  

"space+F to close all folds 
nnoremap <leader>F zM   


"------------- End Python Specific ---------------"

"------------- Golang Specific ---------------"
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

"------------- End Golang Specific ---------------"

set relativenumber
set clipboard=unnamed

" --------- Markdown Specific ---------"
"

"----------- Splits and Navigation -------------- "
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set splitbelow
set splitright

" netrw specific
nnoremap <leader>e :Explore<cr>
nnoremap <leader>v :Vexplore<cr>
nnoremap <leader>h :Sexplore<cr>

" ------- You complete Me ------- "
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"py3 << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"  execfile(activate_this, dict(__file__=activate_this))
"EOF

"let g:ycm_path_to_python_interpreter = '/usr/bin/python'"
let g:powerline_pycmd = "py3"

"-------------- Grepping ------------"
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_use_caching=0
endif

"K searches for Current Word "
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" --- rust specific --- "
if has('nvim')
  let g:LanguageClient_serverCommands = {
      \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
      \ }
  
  " Automatically start language servers.
  let g:LanguageClient_autoStart = 1
  
  " Maps K to hover, gd to goto definition, F2 to rename
  nnoremap <silent> K :call LanguageClient_textDocument_hover()
  nnoremap <silent> gd :call LanguageClient_textDocument_definition()
  nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()
endif 

autocmd BufReadPost *.rs setlocal filetype=rust

" --- yaml --- "
autocmd BufReadPost *.yml,*.yaml setlocal filetype=yaml
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab"

"COC"
if has('nvim')
      set nobackup
      set nowritebackup
      "set cmdheight=2
      set updatetime=300
      set shortmess+=c
      "set signcolumn=yes
      " Use tab for trigger completion with characters ahead and navigate.
      " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
      function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
      endfunction

      inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
      inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
      
      
      " Use <c-space> to trigger completion.
      inoremap <silent><expr> <c-space> coc#refresh()
      
      " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
      " Coc only does snippet and additional edit on confirm.
      inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
      
      " Use `[c` and `]c` to navigate diagnostics
      nmap <silent> [c <Plug>(coc-diagnostic-prev)
      nmap <silent> ]c <Plug>(coc-diagnostic-next)
      
      " Remap keys for gotos
      nmap <silent> gd <Plug>(coc-definition)
      nmap <silent> gy <Plug>(coc-type-definition)
      nmap <silent> gi <Plug>(coc-implementation)
      nmap <silent> gr <Plug>(coc-references)
      
      " Use K to show documentation in preview window
      nnoremap <silent> K :call <SID>show_documentation()<CR>
      
      function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
          execute 'h '.expand('<cword>')
        else
          call CocAction('doHover')
        endif
      endfunction
      
      " Highlight symbol under cursor on CursorHold
      autocmd CursorHold * silent call CocActionAsync('highlight')
      
      " Remap for rename current word
      nmap <leader>rn <Plug>(coc-rename)
      
      " Remap for format selected region
      xmap <leader>f  <Plug>(coc-format-selected)
      nmap <leader>f  <Plug>(coc-format-selected)
      
      augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s).
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
      augroup end
      
      " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
      xmap <leader>a  <Plug>(coc-codeaction-selected)
      nmap <leader>a  <Plug>(coc-codeaction-selected)
      
      " Remap for do codeAction of current line
      nmap <leader>ac  <Plug>(coc-codeaction)
      " Fix autofix problem of current line
      nmap <leader>qf  <Plug>(coc-fix-current)
      
      " Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
      nmap <silent> <TAB> <Plug>(coc-range-select)
      xmap <silent> <TAB> <Plug>(coc-range-select)
      xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)
      
      " Use `:Format` to format current buffer
      command! -nargs=0 Format :call CocAction('format')
      
      " Use `:Fold` to fold current buffer
      command! -nargs=? Fold :call     CocAction('fold', <f-args>)
      
      " use `:OR` for organize import of current buffer
      command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
      
      " Add status line support, for integration with other plugin, checkout `:h coc-status`
      "set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
      
      " Using CocList
      " Show all diagnostics
      nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
      " Manage extensions
      nnoremap <silent> <space>E  :<C-u>CocList extensions<cr>
      " Show commands
      nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
      " Find symbol of current document
      nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
      " Search workspace symbols
      nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
      " Do default action for next item.
      nnoremap <silent> <space>j  :<C-u>CocNext<CR>
      " Do default action for previous item.
      nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
      " Resume latest coc list
      nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
endif

nnoremap <C-p> :GFiles<CR>
